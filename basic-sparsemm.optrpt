Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.0.117 Build 20180804

Compiler options: -g -O3 -qopt-report=5 -qopt-report-phase=vec -march=native -D_GNU_SOURCE -c -o basic-sparsemm.o

Begin optimization report for: basic_sparsemm(const COO, const COO, COO *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at basic-sparsemm.c(14,5) inlined into basic-sparsemm.c(51,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at basic-sparsemm.c(15,9) inlined into basic-sparsemm.c(51,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(51,5)
      <Peeled loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(51,5)
      <Multiversioned v1>
         remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(17,17) ]
         remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(17,32) ]
         remark #15389: vectorization support: reference a[p*m+i] has unaligned access   [ basic-sparsemm.c(17,47) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 4.640 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(51,5)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(51,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(51,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: basic_sparsemm_sum(const COO, const COO, const COO, const COO, const COO, const COO, COO *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at basic-sparsemm.c(112,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Peeled loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference a[j*m+i] has aligned access   [ basic-sparsemm.c(114,13) ]
      remark #15388: vectorization support: reference a[j*m+i] has aligned access   [ basic-sparsemm.c(114,13) ]
      remark #15389: vectorization support: reference b[j*m+i] has unaligned access   [ basic-sparsemm.c(114,27) ]
      remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(114,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.444
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 4.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[j*m+i] has unaligned access   [ basic-sparsemm.c(114,13) ]
      remark #15389: vectorization support: reference a[j*m+i] has unaligned access   [ basic-sparsemm.c(114,13) ]
      remark #15389: vectorization support: reference b[j*m+i] has unaligned access   [ basic-sparsemm.c(114,27) ]
      remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(114,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.833
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(113,9)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at basic-sparsemm.c(117,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Peeled loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Multiversioned v1>
      remark #15388: vectorization support: reference d[j*k+i] has aligned access   [ basic-sparsemm.c(119,13) ]
      remark #15388: vectorization support: reference d[j*k+i] has aligned access   [ basic-sparsemm.c(119,13) ]
      remark #15389: vectorization support: reference e[j*k+i] has unaligned access   [ basic-sparsemm.c(119,27) ]
      remark #15389: vectorization support: reference f[j*k+i] has unaligned access   [ basic-sparsemm.c(119,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.444
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 4.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference d[j*k+i] has unaligned access   [ basic-sparsemm.c(119,13) ]
      remark #15389: vectorization support: reference d[j*k+i] has unaligned access   [ basic-sparsemm.c(119,13) ]
      remark #15389: vectorization support: reference e[j*k+i] has unaligned access   [ basic-sparsemm.c(119,27) ]
      remark #15389: vectorization support: reference f[j*k+i] has unaligned access   [ basic-sparsemm.c(119,40) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.833
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Remainder loop for vectorization, Multiversioned v1>
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at basic-sparsemm.c(118,9)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at basic-sparsemm.c(14,5) inlined into basic-sparsemm.c(128,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at basic-sparsemm.c(15,9) inlined into basic-sparsemm.c(128,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(128,5)
      <Peeled loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(128,5)
      <Multiversioned v1>
         remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(17,17) ]
         remark #15389: vectorization support: reference c[j*m+i] has unaligned access   [ basic-sparsemm.c(17,32) ]
         remark #15389: vectorization support: reference a[p*m+i] has unaligned access   [ basic-sparsemm.c(17,47) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 4.640 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(128,5)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(128,5)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at basic-sparsemm.c(16,13) inlined into basic-sparsemm.c(128,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================
